#pragma plugin nvgt_curl
#include "form.nvgt"
#include "includes/audioutils.nvgt"
#include "includes/downloader.nvgt"
#include "includes/DarkUpdater.nvgt"
#include "includes/sndupdater.nvgt"
#include "includes/langupdater.nvgt"
#include "includes/rotation.nvgt"
//#include "speech.nvgt"
#include "config.nvgt"
#include "bgt_compat.nvgt"
#include "includes/sizer.nvgt"
#include "includes/dateandtime.nvgt"
#include "includes/buildmenus.nvgt"
#include "includes/inventory.nvgt"
#include "includes/extra_functions.nvgt"
#include "includes/sd.nvgt"
#include "includes/save_settings.nvgt"
#include "includes/parsed_data.nvgt"
#include "includes/menu.nvgt"
#include "includes/speedstop.nvgt"
#include "includes/dlg.nvgt"
#include "includes/net.nvgt"
#include "includes/map.nvgt"
#include"includes/sound_pool.nvgt"
#include "includes/network.nvgt"
#include "includes/m_pro.nvgt"
#include "includes/virtualizer.nvgt"
#include "includes/mainloop.nvgt"
#include "includes/item.nvgt"
#include "includes/player.nvgt"
#include"includes/moving_sound_client_handler.nvgt"
#include "includes/netloop.nvgt"
#include "includes/buffer.nvgt"
#include"includes/speed_stop_sound.nvgt"
#include "includes/hip.nvgt"
#include"includes/src.nvgt"
uint server_id=-1;
string name,password,mapname,lang,maplist,currentcameratile,motd,geversion,dir="right",inv,inventory,invlist,trackplayer,compid,currentloc,jumpsound="jump";
int chatcons_counter=0;

network_event e;
network @host;
vector me,mr,max,camera;
double facing=0.0;
speed_stop_sound spd;
timer movetimer,serverboxcooldowntimer,autotracktimer,pingtimer,falltimer,jumptimer,jumpsendtimer,xtimer,posetimer,boattimer;
savedata sd("config/settings.dat","Settingsencryptionnononoyoucan'treadthisfileyadingus127374747478587546432634646467464646464646437373bitch");
string[] items;
sound menusound,capbeep;
int readchats=1, readonlinemsgs=1,sleepmode=-1,d2dsupport=0,position=0,walktime=200,beacons=1,playlogo=1,bufferlogging=0,bufferbeep=1,autowalking=1,falltime=100,falldistance=0,movetime,canjump=1,sitting=0,jumptime=100,jumpup=0,jumplandz=0,airtime=100,combo=0,boattime=1000,ask_too_exit=1,interior=0;
bool disable_cordinates=false,unlocked_camera=false,disable_camera=false,in_game=false,safe,can_move=true,pinging=false,autotracking=false,falling=false,disable_jump=false,jumping=false,creating,x=false,connected,bike=false,boat=false,right_boating=false,left_boating=false;
virtualizer v;
sound_pool p, itempool,mpool,distpool,sourcepool;
parsed_data pu;
key_hold kescape(KEY_ESCAPE,1000,1000);
key_hold kf10(KEY_F10,200,80);
key_hold kf11(KEY_F11,200,80);
key_hold kleft(KEY_LEFT,200,80);
key_hold kright(KEY_RIGHT,200,80);
key_hold kup(KEY_UP,200,80);
key_hold kdown(KEY_DOWN,200,80);
key_hold kpgdn(KEY_NEXT,200,80);
key_hold kpgup(KEY_PRIOR,200,80);
key_hold khome(KEY_HOME,300,100);
key_hold kend(KEY_END,300,100);
key_hold ke(KEY_E,300,50);
key_hold kr(KEY_R,300,50);
key_hold kspace(KEY_SPACE,300,50);
key_hold kq(KEY_Q,300,50);
key_hold kw(KEY_W,300,50);
key_hold kpr(KEY_PERIOD,300,50);
key_hold kcm(KEY_COMMA,300,50);
key_hold kback(KEY_BACK,300,50);
audio_form form;

void main()
{
sound_pool p, itempool,mpool,distpool,sourcepool;
spd.disable();
sound_global_hrtf=true;
invcat.insert_last("all inventory");
//set_sound_decryption_key("",true);
mapitems.reserve(300);
compid=generate_computer_id("ralralralralral", true);
distpool.pan_step=0.2;
distpool.behind_pitch_decrease=5;
distpool.volume_step=0.05;
p.behind_pitch_decrease=-5;
itempool.behind_pitch_decrease=-5;
mpool.behind_pitch_decrease=-5;
itempool.behind_pitch_decrease=-5;
create_buffer("all");
create_buffer("chats");
create_buffer("misc");
create_buffer("notifications");
create_buffer("private messages");
if (!directory_exists("config"))
directory_create("config");
show_game_window(gamename+" "+ver);
if(webdir!="localhost" && webdir!="")
{
check_setup_update();
check_game_update();
scheck_lang_update();
sndcheck();
}
network tempnet;
@host=tempnet;
readprefs();
network t;
@host=t;

readprefs();
if(playlogo==1)
//dlgplay("sounds\\logo.ogg",true,10);
if(lang=="") set_lang();
pu.set_file("lang/"+lang+".lng");
spd.enable();
spd.reset(true);

mainmenu();
}
void reset_game()
{
platforms.resize(0);
mapitems.resize(0);
players.resize(0);
pinging=false;
zones.resize(0);
reset_network();
//clear_map()
if(connected and bufferlogging==1)
destroy_all_msounds();
p.destroy_all();
mpool.destroy_all();
sourcepool.destroy_all();
connected=false;
}
bool is_sound_number(string t)
{
if(sleepmode!=-1) return false;
t=string_replace(t, ".", "", true);
t=string_replace(t, "-", "", true);
if(string_is_digits(t))
return true;
return false;
}
void mainloop()
{
mr.x=round(me.x,0);
mr.y=round(me.y,0);
mr.z=round(me.z,0);

sourcecheckloop();
checkloc();
//szcheck();
for(uint i=0; i<mapitems.length(); i+=1) {
if(mapitems[i].map==mapname and mapitems[i].beeptimer.elapsed>=300) {
mapitems[i].beeptimer.restart();
itempool.play_3d("item.ogg",me.x,me.y,me.z, mapitems[i].x, mapitems[i].y, mapitems[i].z, calculate_theta(facing), false);
}
}
if (jumping==true)
{
movetime=airtime;
}
else
{
movetime=walktime;
}
fallloop();
fallcheck();
fallingloop();
if(walktime<200)
{
walktime=200;
}
}
void death()
{
speak("To respawn, press enter.");
while(true)
{
wait(5);
mainloop();
if(key_pressed(KEY_UP) or key_pressed(KEY_DOWN) or key_pressed(KEY_LEFT) or key_pressed(KEY_RIGHT))
{
speak("To respawn, press enter.");
}
if(key_pressed(KEY_RETURN))
{
speak("Regenerating.");
send_reliable(0,"regenerate",0);
return;
}
}
}
void fallloop()
{
if(jumptimer.elapsed > jumptime and jumping==true)
{
jumptimer.restart();
if(jumpup==1)
{
if(me.z <=jumplandz+5)
{
me.z++;
if(jumpsendtimer.elapsed>movetime)
{
jumpsendtimer.restart();
send_reliable(0, "move_to_a "+me.x+" "+me.y+" "+me.z, 0);
}
if(get_tile_at(mr.x, mr.y, me.z)!="" and get_tile_at(mr.x, mr.y, me.z)!="blank" and get_tile_at(mr.x, mr.y, me.z)!="air")
{
jumpup=0;
}
}
else
{
jumpup=0;
}
}
else if(jumpup==0)
{
if(me.z > jumplandz)
{
me.z--;
positions();
if(jumpsendtimer.elapsed>movetime)
{
jumpsendtimer.restart();
send_reliable(0, "move_to_a "+me.x+" "+me.y+" "+me.z, 0);
}
if(get_tile_at(mr.x, mr.y, me.z)!="" and get_tile_at(mr.x, mr.y, me.z)!="blank" and get_tile_at(mr.x, mr.y, me.z)!="air")
{
p.play_stationary_extended("sounds\\"+get_tile_at(mr.x, mr.y, me.z)+"land.ogg", false, 0.0, 0.0, 0, get_tile_pitch(mr.x,mr.y,me.z), false,null,null); 
if(jumpsendtimer.elapsed>movetime)
{
jumpsendtimer.restart();
send_reliable(0, "move_to_a "+me.x+" "+me.y+" "+me.z, 0);
}
send_reliable(0, "land", 0);
jumping=false;
//chack_tile();
}
}
else
{
if(get_tile_at(mr.x, mr.y, me.z)=="" or get_tile_at(mr.x, mr.y, me.z)=="blank" or get_tile_at(mr.x, mr.y, me.z)=="air")
{
falling=true;
falldistance=0;
falltimer.restart();
jumping=false;
return;
}
p.play_stationary_extended("sounds\\"+get_tile_at(mr.x, mr.y, me.z)+"land.ogg", false, 0.0, 0.0, 0, get_tile_pitch(mr.x,mr.y,me.z), false,null,null); 
if(jumpsendtimer.elapsed>movetime)
{
jumpsendtimer.restart();
send_reliable(0, "move_to_a "+me.x+" "+me.y+" "+me.z, 0);
}
send_reliable(0, "land", 0);
jumping=false;
//chack_tile();
}
}
}
}
void fallcheck()
{
/*
if(dmoving==true or starting==true or travel==true or looking==true) return;
*/
if(get_tile_at(mr.x, mr.y, me.z)=="" and falling==false and jumping==false or get_tile_at(mr.x, mr.y, me.z)=="blank" and falling==false and jumping==false or get_tile_at(mr.x, mr.y, me.z)=="air" and falling==false and jumping==false)
{
falling=true;
falldistance=0;
falltimer.restart();
p.play_stationary("sounds\\fall.ogg", false);
send_reliable(0, "fall", 0);
}
}
void fallingloop()
{
if(falling==true and falltimer.elapsed > falltime)
{
if(get_tile_at(mr.x, mr.y, me.z)!="" and get_tile_at(mr.x, mr.y, me.z)!="blank" and get_tile_at(mr.x, mr.y, me.z)!="air")
{
falling=false;
if(falldistance < 4)
{
p.play_stationary_extended("sounds\\"+get_tile_at(mr.x, mr.y, me.z)+"land.ogg", false, 0.0, 0.0, 0, get_tile_pitch(mr.x,mr.y,me.z), false,null,null); 
if(jumpsendtimer.elapsed>movetime)
{
jumpsendtimer.restart();
send_reliable(0, "move_to_a "+me.x+" "+me.y+" "+me.z, 0);
}
send_reliable(0, "land", 0);
falling=false;
//chack_tile();
}
else
{
p.play_stationary_extended("sounds\\"+get_tile_at(mr.x, mr.y, me.z)+"fall.ogg", false, 0.0, 0.0, 0, get_tile_pitch(mr.x,mr.y,me.z), false,null,null); 
if(jumpsendtimer.elapsed>movetime)
{
jumpsendtimer.restart();
send_reliable(0, "move_to_a "+me.x+" "+me.y+" "+me.z, 0);
}
send_reliable(0, "hardland "+falldistance, 0);
falling=false;
//chack_tile();
}
return;
}
falltimer.restart();
falldistance++;
me.z--;
positions();
if(jumpsendtimer.elapsed>movetime)
{
jumpsendtimer.restart();
send_reliable(0, "move_to_a "+me.x+" "+me.y+" "+me.z, 0);
}

}
}
void tell_where(int x, int y, int z,string map,bool saycoords=true)
{
string soundname="track";
if(map!=mapname and saycoords==true) {
speak("This player is on a different map");
return;
}
string locstring=calculate_x_y_string(calculate_x_y_angle(me.x,me.y,x,y,facing));
int dist=get_3d_distance(me.x,me.y,me.z,x,y,z);
if(saycoords)
speak(locstring+" ("+dist+" tiles away) at "+x+", "+y+", "+z);
p.play_3d("sounds\\"+soundname+".ogg", me.x, me.y, me.z, x, y, z, calculate_theta(facing), false);
}
double convert_to_pan(double length,double index, double range1, double range2)
{
double range=range2-range1;
double percent=0;
if (length-1>0 and index>0)
percent=index/(length-1);
else
percent=0;
double value=range1+range*percent;
return value;
}
bool int_to_bool(int num)
{
if(num==1)
{
return true;
}
return false;
}
int bool_to_int(bool b)
{
if(b==true)
{
return 1;
}
return 0;
}
string convert_to_list(string[] arr)
{
string list;
if(arr.length()==0) return "";
if(arr.length()==1) return arr[0];
for(uint i=0; i<arr.length(); i++)
{
if(i==arr.length()-1)
list+=" and "+arr[i];
else
list+=arr[i]+", ";
}
return list;
}
string convert_to_list(int[] arr)
{
string list;
if(arr.length()==0) return "";
if(arr.length()==1) return arr[0];
for(uint i=0; i<arr.length(); i++)
{
if(i==arr.length()-1)
list+=" and "+arr[i];
else
list+=arr[i]+", ";
}
return list;
}
