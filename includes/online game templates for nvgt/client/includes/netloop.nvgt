void netloop()
{
e=host.request(5);
if (e.type==event_receive)
{
if (e.channel==0)
{
string[] parsed=get_event_message().split(" ");
if(parsed[0]=="tracknow" and parsed.length()>1) {
trackplayer=parsed[1];
speak("Tracking "+trackplayer);
}
else if(parsed[0]=="reboot_client")
{
speak("The server is rebooting. Please reconnect in about 10 to 20 seconds.");
reset_game();
mainmenu();
}
else if(parsed[0]=="set_sit")
{
sitting=string_to_number(parsed[1]);
}
else if(parsed[0]=="sitstart")
{
sitting=1;
}
else if(parsed[0]=="sitstop")
{
sitting=0;
}
else if(parsed[0]=="put")
{
focuseditem="";
}
else if(parsed[0]=="hempty")
{
int index=string_to_number(parsed[1]);
send_reliable(peer_id, "putback "+index, 0);
focuseditem="";
send_reliable(peer_id,"putinv",0);
if(index==1)
lefthand="nothing";
llastuse="";
if(index==2)
righthand="nothing";
rlastuse="";
}
else if(parsed[0]=="inventory" and parsed.length()>=1)
{
inventory=string_decompress(string_trim_left(get_event_message(), 10));
//speak(string_decompress(string_trim_left(get_event_message(), 10)));
string data;
//invcheck();
}
else if(parsed[0]=="invlist" and parsed.length()>1)
{
string[] itemlist=string_split(parsed[1], "\r\n", false);
invlist="";
//invlist=string_replace(get_event_message(),"inv_list ","\r\n",true);
int i=0;
while(i<itemlist.length())
{
if(inv_item_number(itemlist[i])>0)
{
invlist+=pu.get_value(itemlist[i])+"|"+itemlist[i]+"\r\n";
}
i++;
}
//invcheck();
//invcat_set();
}
else if(parsed[0]=="buildtp")
{
if(d2dsupport==0)
{
binput@ dat=builder_input("minx=enter the left x of travel point;maxx=enter the right x of travel point;miny=enter the minimum y of travel point;maxy=enter the maximum y of travel point;minz=enter the bottom z of travel point;maxz=enter the top z of travel point;destx=enter the x destination of travel point;desty=enter the y destination of travel point;destz=enter the z destination of travel point;time=enter the travel time;text=enter the text this travelpoint should speak when moving the player;minlevel=write the minimum level required t ;enter the map;maxlevel=Write the highest level that can be entered on the map. Players above this level cannot enter this map.");
if(@dat==null) return;
string items=v.input("Write the items required to enter the map. If there is more than one item, please write without spaces; separate with.","", true, false);
if(items=="")
{
items="none";
}
double item_amount=string_to_number(v.input("Please write the number of items required to enter the map in the previous order. If there is more than one item, their numbers are; separate with.","", true, false));
if(item_amount=="")
{
item_amount=0;
}

string map=mapmenu();
if(map=="")
{
speak("canceled");
return;
}
string startsound=custom_menu("Select the door open sound, that when the player click on it",dooropen);
string endsound=custom_menu("Select the door close sound, that when the player click on it",doorclose);
string temp;
send_reliable(0,"addtp travelpoint:"+dat.num("minx")+":"+dat.num("maxx")+":"+dat.num("miny")+":"+dat.num("maxy")+":"+dat.num("minz")+":"+dat.num("maxz")+":"+map+":"+dat.num("destx")+":"+dat.num("desty")+":"+dat.num("destz")+":"+startsound+":"+endsound+":"+dat.num("time")+":"+dat.str("text")+":"+items+":"+item_amount+":"+dat.num("minlevel")+""+dat.num("maxlevel"),10);
}
else
{
binput@ dat=builder_input("minx=enter the left x of travel point;maxx=enter the right x of travel point;minz=enter the bottom z of travel point;maxz=enter the top z of travel point;destx=enter the x destination of travel point;destz=enter the z destination of travel point;time=enter the travel time;text=enter the text this travelpoint should speak when moving the player;minlevel=write the minimum level required t ;enter the map;maxlevel=Write the highest level that can be entered on the map. Players above this level cannot enter this map.");
if(@dat==null) return;
string items=v.input("Write the items required to enter the map. If there is more than one item, please write without spaces; separate with.","", true, false);
if(items=="")
{
items="none";
}
double item_amount=string_to_number(v.input("Please write the number of items required to enter the map in the previous order. If there is more than one item, their numbers are; separate with.","", true, false));
if(item_amount=="")
{
item_amount=0;
}
string map=mapmenu();
if(map=="")
{
speak("canceled");
return;
}
string startsound=custom_menu("Select the door open sound, that when the player click on it",dooropen);
string endsound=custom_menu("Select the door close sound, that when the player click on it",doorclose);
string temp;
send_reliable(0,"addtp travelpoint:"+dat.num("minx")+":"+dat.num("maxx")+":0:0:"+dat.num("minz")+":"+dat.num("maxz")+":"+map+":"+dat.num("destx")+":0:"+dat.num("destz")+":"+startsound+":"+endsound+":"+dat.num("time")+":"+dat.str("text")+":"+items+":"+item_amount+":"+dat.num("minlevel")+""+dat.num("maxlevel"),10);
}
}
else if(parsed[0]=="buildzone")
{
if(d2dsupport==1)
{
binput@ dat=builder_input("minx=enter the left x of your zone;maxx=enter the right x of your zone;minz=enter the bottom y of your zone;maxz=enter the top y of your zone;text=enter the text of your zone");
if(@dat!=null)
{
string temp="";
int trackable=yesno("would you like this zone to be trackable via the grave menu?");
if(trackable==1) temp=":trackme";
send_reliable(0,"addzone zone:"+dat.num("minx")+":"+dat.num("maxx")+":0:0:"+dat.num("minz")+":"+dat.num("maxz")+":"+dat.str("text")+temp,10);
}
}
else
{
binput@ dat=builder_input("minx=enter the left x of your zone;maxx=enter the right x of your zone;miny=enter the minimum y of your zone;maxy=enter the maximum y of your zone;minz=enter the bottom z of your zone;maxz=enter the top z of your zone;text=enter the text of your zone");
if(@dat!=null)
{
string temp="";
int trackable=yesno("would you like this zone to be trackable via the grave menu?");
if(trackable==1) temp=":trackme";
send_reliable(0,"addzone zone:"+dat.num("minx")+":"+dat.num("maxx")+":"+dat.num("miny")+":"+dat.num("maxy")+":"+dat.num("minz")+":"+dat.num("maxz")+":"+dat.str("text")+temp,10);
}
}
}
else if(parsed[0]=="buildtile")
{
if(d2dsupport==0)
{
binput@ dat=builder_input("minx=enter the left x of this tile;maxx=enter the right x of this tile;miny=enter the minimum y of this tile;maxy=enter the maximum y of this tile;minz=enter the bottom z of this tile;maxz=enter the top z of this tile");
if(@dat==null) return;
string platform=plattypemenu();
if(platform=="")
return;
string snd;
if(string_contains(platform,"wall",1)>-1) snd=platform;
else snd=platform+"step"+random(1,5);
string vl=pitch_set(snd);
if(vl=="canceled")
{
speak(pu.get_value("canceled"));
return;
}
string temp;
send_reliable(0,"addtile platform:"+dat.num("minx")+":"+dat.num("maxx")+":"+dat.num("miny")+":"+dat.num("maxy")+":"+dat.num("minz")+":"+dat.num("maxz")+":"+platform+":"+vl+temp,10);
}
else
{
binput@ dat=builder_input("minx=enter the left x of this tile;maxx=enter the right x of this tile;miny=enter the bottom z of this tile;maxy=enter the top z of this tile");
if(@dat==null) return;
string platform=plattypemenu();
if(platform=="")
return;
string snd;
if(string_contains(platform,"wall",1)>-1) snd=platform;
else snd=platform+"step"+random(1,5);
string vl=pitch_set(snd);
if(vl=="canceled")
{
speak(pu.get_value("canceled"));
return;
}
send_reliable(0,"addtile platform:"+dat.num("minx")+":"+dat.num("maxx")+":0:0:"+dat.num("miny")+":"+dat.num("maxy")+":"+platform+":"+vl,10);
}
}
else if(parsed[0]=="buildsrc")
{
if(d2dsupport==1)
{
binput@ dat=builder_input("minx=enter the left x;maxx=enter the right x;miny=enter the minimum y;maxy=enter the maximum y");
if(@dat==null) return;
string soundfile=custom_menu("choose an ambiance",srctypes,",");
if(soundfile=="")
{
speak("canceled");
return;
}
string vl=srcv(soundfile);
if(vl=="canceled")
{
speak(pu.get_value("canceled"));
return;
}
string temp="";
int amb=yesno("would you like this source sound to work as an ambience?");
if(amb==1) temp=":1";
send_reliable(peer_id,"addsrc src:"+dat.num("minx")+":"+dat.num("maxx")+":0:0:"+dat.num("miny")+":"+dat.num("maxy")+":"+soundfile+".ogg:"+vl+temp,10);
}
else
{
binput@ dat=builder_input("minx=enter the left x;maxx=enter the right x;miny=enter the minimum y;maxy=enter the maximum y;minz=enter the bottom z;maxz=enter the top z");
if(@dat==null) return;
string soundfile=custom_menu("choose an ambiance",srctypes,",");
if(soundfile=="")
{
speak("canceled");
return;
}
string vl=srcv(soundfile);
if(vl=="canceled")
{
speak(pu.get_value("canceled"));
return;
}
string temp="";
int amb=yesno("would you like this source sound to work as an ambience?");
if(amb==1) temp=":1";
send_reliable(peer_id,"addsrc src:"+dat.num("minx")+":"+dat.num("maxx")+":"+dat.num("miny")+":"+dat.num("maxy")+":"+dat.num("minz")+":"+dat.num("maxz")+":"+soundfile+".ogg:"+vl+temp,10);
}
}
else if(parsed[0]=="listmaps" and parsed.length()>=1)
{
maplist=string_replace(get_event_message(),"listmaps ","",true);
}
else if(parsed[0]=="buildnewmap")
{
setupmenu(false,true);
m.add_item_tts("2d","2d");
m.add_item_tts("3d","3d");
m.add_item_tts("go back","back");
int mres=m.run("select your map type",true);
if (mres==1)
{
binput@ dat=builder_input("mapname=mapname;minx=enter the minimum x;maxx=enter the maximum x;miny=enter the minimum y;maxy=enter the maximum y");
if(@dat==null) return;
string platform=plattypemenu();
if(platform=="") return;
string snd;
if(string_contains(platform,"wall",1)>-1) snd=platform;
else snd=platform+"step"+random(1,5);
string vl=pitch_set(snd);
if(vl=="canceled")
{
speak(pu.get_value("canceled"));
return;
}
send_reliable(peer_id,"new2dmap "+dat.str("mapname")+" "+dat.num("minx")+" "+dat.num("maxx")+" "+dat.num("miny")+" "+dat.num("maxy")+" "+platform+" "+vl,10);
}
else if (mres==2)
{
binput@ dat=builder_input("mapname=mapname;minx=enter the minimum x;maxx=enter the maximum x;miny=enter the minimum y;maxy=enter the maximum y;minz=enter the minimum z;maxz=enter the maximum z");
if(@dat==null) return;
string platform=plattypemenu();
if(platform=="") return;
string snd;
if(string_contains(platform,"wall",1)>-1) snd=platform;
else snd=platform+"step"+random(1,5);
string vl=pitch_set(snd);
if(vl=="canceled")
{
speak(pu.get_value("canceled"));
return;
}
send_reliable(peer_id,"newmap "+dat.str("mapname")+" "+dat.num("minx")+" "+dat.num("maxx")+" "+dat.num("miny")+" "+dat.num("maxy")+" "+dat.num("minz")+" "+dat.num("maxz")+" "+platform+" "+vl,10);
}
}
else if(parsed[0]=="editmap" and parsed.length()>1)
{
string m=string_trim_left(get_event_message(),8);
edit_line(m);
}
else if(parsed[0]=="distsound" and parsed.length()>5)
{
string soundname=parsed[1];
int x=string_to_number(parsed[2]);
int y=string_to_number(parsed[3]);
int z=string_to_number(parsed[4]);
string soundmap=parsed[5];
if(soundmap==mapname)
distpool.play_3d(soundname+".ogg", me.x, me.y, me.z, x, y, z, facing, false);
}
else if(parsed[0]=="newitem") {
int x=string_to_number(parsed[1]);
int y=string_to_number(parsed[2]);
int z=string_to_number(parsed[3]);
string map=parsed[4];
int itemid=string_to_number(parsed[5]);
spawn_mapitem(x,y,z,map,itemid);
}
else if(parsed[0]=="remitem" and parsed.length()>1) {
remove_mapitem(string_to_number(parsed[1]));
}
else if(parsed[0]=="resetwalktime")
{
walktime=200;
}
else if(parsed[0]=="writefile")
{
string filename=parsed[1];
string text=string_replace(get_event_message(),parsed[0]+" "+parsed[1]+" ","",false);
file f;
f.open(filename,"wb");
f.write(text);
f.close();
}
else if(parsed[0]=="pm")
{
string message=string_replace(get_event_message(),"pm ","",false);
itempool.play_stationary("pm.ogg",false);
add_buffer_item("private messages",message);
}
else if(parsed[0]=="launchmenu")
{
string i=string_replace(parsed[1],"[SPCE]"," ",true);
string t=string_replace(parsed[2], "[SPCE]", " ", true);
//string items=string_replace(get_event_message(),parsed[0]+" "+parsed[1]+" "+parsed[2]+" "+parsed[3]+" ","",true);
int channel=string_to_number(parsed[3]);
//string items=string_replace(get_event_message(),"launchmenu ","\r\n",true);
string items=string_replace(get_event_message(),parsed[0]+" "+parsed[1]+" "+parsed[2]+" "+parsed[3]+" ","",true);
serverside_menu(t,i,items,channel);
}
else if(parsed[0]=="notify")
{
string mess=string_replace(get_event_message(),"notify ","",false);
p.play_stationary("sounds\\notify.ogg",false);
add_buffer_item("notifications",mess);
}
else if(parsed[0]=="stopmoving")
{
can_move=false;
}
else if(parsed[0]=="startmoving")
{
can_move=true;
}
else if(parsed[0]=="pong" and pinging==true)
{
pinging=false;
p.play_stationary("sounds\\pingstop.ogg",false);
speak("The ping returned in "+pingtimer.elapsed+" milliseconds.");
}
else if(parsed[0]=="exit")
{
reset_game();
mainmenu();
}
else if(parsed[0]=="updating")
{
dlg("The server is updating, Please reconnect in about 10 to 20 seconds.");
reset_game();
mainmenu();
}
else if(parsed[0]=="exiting")
{
dlg("The server is going offline for maintenance. Don't worry, we'll be back soon. Your client will now disconnect.");
reset_game();
mainmenu();
}
else if(parsed[0]=="jump")
{
int x=string_to_number(parsed[2]);
int y=string_to_number(parsed[3]);
int z=string_to_number(parsed[4]);
string map=parsed[5];
if(parsed[1]!=name and map==mapname)
{
p.play_3d("sounds\\jump.ogg", me.x, me.y, me.z, x, y, z, calculate_theta(facing), false);
}
}
else if(parsed[0]=="wallsound")
{
int x=string_to_number(parsed[2]);
int y=string_to_number(parsed[3]);
int z=string_to_number(parsed[4]);
string map=parsed[5];
if(parsed[6]!=name and map==mapname)
{
p.play_extended_3d("sounds\\"+parsed[1]+".ogg", me.x, me.y, me.z, x, y, z, calculate_theta(facing), 0, 0, 0, 0, 0,0,false, 0.0, 0.0, 0, string_to_number(parsed[7]));
}
}
else if(parsed[0]=="hardland")
{
int x=string_to_number(parsed[2]);
int y=string_to_number(parsed[3]);
int z=string_to_number(parsed[4]);
string map=parsed[5];
if(map==mapname&&name!=parsed[1])
{
p.play_extended_3d("sounds\\"+get_tile_at(x, y, z)+"fall.ogg", mr.x, mr.y, me.z, x, y, z, facing, 0,0, 0, 0, 0, 0, false, 0.0, 0.0, 0.0, get_tile_pitch(x,y,z), false, null, null, true, 0);
}
}
else if(parsed[0]=="land")
{
int x=string_to_number(parsed[2]);
int y=string_to_number(parsed[3]);
int z=string_to_number(parsed[4]);
string map=parsed[5];
if(parsed[1]!=name and map==mapname)
{
string gt=get_tile_at(x, y, z);
p.play_extended_3d("sounds\\"+get_tile_at(x, y, z)+"land.ogg", mr.x, mr.y, me.z, x, y, z, facing, 0,0, 0, 0, 0, 0, false, 0.0, 0.0, 0.0, get_tile_pitch(x,y,z), false, null, null, true, 0);
}
}
else if(parsed[0]=="fall")
{
int x=string_to_number(parsed[2]);
int y=string_to_number(parsed[3]);
int z=string_to_number(parsed[4]);
string map=parsed[5];
if(parsed[1]!=name and map==mapname)
{
p.play_3d("sounds\\fall.ogg", me.x, me.y, me.z, x, y, z, calculate_theta(facing), false);
}
}
else if(parsed[0]=="die")
{
death();
}
else if(parsed[0]=="mapdata")
{
load_map(string_replace(get_event_message(), "mapdata ", "", false));
}
else if(parsed[0]=="move" and parsed.length()>3)
{
me.x=string_to_number(parsed[1]);
me.y=string_to_number(parsed[2]);
me.z=string_to_number(parsed[3]);
positions();
}
else if (parsed[0]=="play_s" and parsed.length()>=4)
{
p.play_stationary_extended("sounds\\"+parsed[1], false, 0.0, 0.0, string_to_number(parsed[2]), string_to_number(parsed[3]), false,null,null); 
}
else if(parsed[0]=="offline" and parsed.length()>1)
{
int x=string_to_number(parsed[1]);
int y=string_to_number(parsed[2]);
int z=string_to_number(parsed[3]);
if(readonlinemsgs==1)
{
if(me.x > x-20 and me.x < x+20 and me.y > y-20 and me.y < y+20 and me.z>z-20 and me.z<z+20 and parsed[4]!=name and mapname==parsed[5])
{
p.play_3d("sounds\\offline.ogg", me.x, me.y, me.z, x, y, z, calculate_theta(facing), false);
add_buffer_item("misc",parsed[4]+" went offline");
}
else
{
p.play_stationary("sounds\\offline.ogg", false);
add_buffer_item("misc",parsed[4]+" went offline");
}
}
remove_player(parsed[4]);
}
else if(parsed[0]=="forcespawn" and parsed.length()>5) {
spawn_player(string_to_number(parsed[1]), string_to_number(parsed[2]), string_to_number(parsed[3]), parsed[4], parsed[5]);
}
else if(parsed[0]=="online")
{
int x=string_to_number(parsed[1]);
int y=string_to_number(parsed[2]);
int z=string_to_number(parsed[3]);
if(readonlinemsgs==1)
{
if(me.x > x-20 and me.x < x+20 and me.y > y-20 and me.y < y+20 and me.z>z-20 and me.z<z+20 and parsed[4]!=name and parsed[5]==mapname)
{
p.play_3d("sounds\\online.ogg", me.x, me.y, me.z, x, y, z, calculate_theta(facing), false);
add_buffer_item("misc",parsed[4]+" came online");
}
else
{
p.play_stationary("sounds\\online.ogg", false);
add_buffer_item("misc",parsed[4]+" came online");
}
}
spawn_player(x, y, z, parsed[5], parsed[4]);
}
else
speak(get_event_message());
}
if (e.channel==1)
{
if(readchats==1)
{
add_buffer_item("chats",get_event_message());
}
}
if (e.channel==2)
{
add_buffer_item("misc",get_event_message());
}
if(e.channel==3)
{
string[] parsed=string_split(get_event_message()," ",true);
if(parsed.length()>=7 and is_sound_number(parsed[1]) and is_sound_number(parsed[2]) and is_sound_number(parsed[3]))
{
if(parsed.length()==7)
{
if(parsed[4]==mapname and sleepmode==-1)
{
p.play_extended_3d("sounds\\"+parsed[0]+".ogg", mr.x, mr.y, me.z, string_to_number(parsed[1]), string_to_number(parsed[2]), string_to_number(parsed[3]), facing, 0,0, 0, 0, 0, 0, false, 0.0, 0.0, string_to_number(parsed[5]), string_to_number(parsed[6]), false, null, null, true, 0);
}
}
}
}
if(e.channel==4)
{
string[] parsed=string_split(get_event_message(), " ", false);
if(parsed[0]=="createmsound"&&parsed.length()>=8) createmsound(parsed[1],parsed[2],string_to_number(parsed[3]),string_to_number(parsed[4]),string_to_number(parsed[5]),parsed[6],string_to_number(parsed[7]));
if(parsed[0]=="updatemsound"&&parsed.length()>=6) updatemsound(parsed[1],string_to_number(parsed[2]),string_to_number(parsed[3]),string_to_number(parsed[4]),string_to_number(parsed[5]));
if(parsed[0]=="destroymsound"&&parsed.length()>1) destroymsound(parsed[1]);
}
else if(e.channel==5) {
string[] parsed=string_split(get_event_message(), " ",false);
if(parsed[0]=="update_player") {
int x=string_to_number(parsed[1]);
int y=string_to_number(parsed[2]);
int z=string_to_number(parsed[3]);
string map=parsed[4];
string name=parsed[5];
update_player_coordinates(name,x,y,z,parsed[4]);
}
}
if(e.channel==9)
{
string[] parsed=string_split(get_event_message()," ",true);
//speak("ok");
if(parsed[3]==mapname and sleepmode==-1 and parsed[4]!=name)
{
string gt=get_tile_at(string_to_number(parsed[0]),string_to_number(parsed[1]),string_to_number(parsed[2]));
//speak("ok");
if (string_contains(gt,"wall",1)>-1)
{
p.play_extended_3d("sounds\\"+get_tile_at(string_to_number(parsed[0]), string_to_number(parsed[1]), string_to_number(parsed[2]))+".ogg", mr.x, mr.y, me.z, string_to_number(parsed[0]), string_to_number(parsed[1]), string_to_number(parsed[2]), facing, 0,0, 0, 0, 0, 0, false, 0.0, 0.0, 0.0, get_tile_pitch(string_to_number(parsed[0]),string_to_number(parsed[1]),string_to_number(parsed[2])), false, null, null, true, 0);

}
else
{
p.play_extended_3d("sounds\\"+get_tile_at(string_to_number(parsed[0]), string_to_number(parsed[1]), string_to_number(parsed[2]))+"step"+random(1,5)+".ogg", mr.x, mr.y, me.z, string_to_number(parsed[0]), string_to_number(parsed[1]), string_to_number(parsed[2]), facing, 0,0, 0, 0, 0, 0, false, 0.0, 0.0, 0.0, get_tile_pitch(string_to_number(parsed[0]),string_to_number(parsed[1]),string_to_number(parsed[2])), false, null, null, true, 0);
}
}
}

}
}
