dynamic_menu_pro m;
void mainmenu()
{
setupmenu(true);

m.add_item_tts(pu.get_value("Login"),"play");
m.add_item_tts(pu.get_value("create account"),"create");
m.add_item_tts(pu.get_value("game settings"),"options");
m.add_item_tts(pu.get_value("Exit"),"exit");
int mres=m.run("Main Menu",true);
if (m.get_item_name(mres)=="play")
{
login();
}
else if(m.get_item_name(mres)=="create")
{
create();
}
else if(m.get_item_name(mres)=="options")
{
optionsmenu();
}
else if(m.get_item_name(mres)=="exit" or mres==0)
{
writeprefs();
exit();
}
}
void optionsmenu()
{
setupmenu();
m.add_item_tts("Setup an existing account","setupaccountnow");
if(playlogo==1)
m.add_item_tts("Disable playing of logo at startup","logo");
else
m.add_item_tts("Enable playing of logo at startup","logo");
if(bufferlogging==1)
m.add_item_tts("Disable buffer logging","buffer");
else
m.add_item_tts("Enable buffer logging","buffer");
m.add_item_tts("set language","lang");
m.add_item_tts("Go back","back");
int mres=m.run("Options menu. Select an option.",true);
if(m.get_item_name(mres)=="setupaccountnow")
{
string user=v.input("Enter your username.");
if(user=="")
{
dlg("please enter a username");
mainmenu();
}
string pw=v.input("Enter your password.",false,true);
if(pw=="")
{
dlg("please enter a password");
optionsmenu();
}
if(string_contains(user," ",1)>-1 or string_contains(pw," ",1)>-1)
{
dlg("Sorry, the username / password combination you entered is not valid. Please remember that usernames and passwords may not include spaces. If you continue to get this error and are entering your username / password correctly without any spaces or other forbidden simbles, contact a developer.");
optionsmenu();
}
else
{
name=user;
password=pw;
writeprefs();
speak("Account information updated successfully.");
optionsmenu();
}
}
else if(m.get_item_name(mres)=="lang")
{
set_lang();
}
else if(m.get_item_name(mres)=="logo")
{
if(playlogo==1)
playlogo=0;
else
playlogo=1;
writeprefs();
optionsmenu();
}
else if(m.get_item_name(mres)=="buffer")
{
if(bufferlogging==1)
bufferlogging=0;
else
bufferlogging=1;
writeprefs();
optionsmenu();
}
else if(m.get_item_name(mres)=="back" or mres==0)
{
mainmenu();
}
}
void setupmenu(bool music=false, bool online=false)
{
m.reset(true);
m.enable_up_and_down=true;
m.enable_left_and_right=false;
m.enable_side_scrolling=false;
m.wrap=true;
m.wrap_sound="menuwrap.ogg";
m.enable_home_and_end=true;
m.repeat_items_at_edges=true;
m.enable_first_letter_navigation=true;
m.edge_sound="menuedge.ogg";
m.click_sound="menumove.ogg";
m.enter_sound="menuenter.ogg";
if(online)
m.set_callback(menunet,"");
}
int menunet(dynamic_menu_pro@m, string stuff)
{
mainloop();
//netloop();
return 0;
}
string select_player(string text, string data)
{
setupmenu(false, true);
string[] parsed=string_split(data, "\r\n", true);
for(uint i=0; i<parsed.length(); i++)
{
m.add_item_tts(parsed[i],parsed[i]);
}
m.add_item_tts("Go back","back");
int mres=m.run(text, true);
if(m.get_item_name(mres)=="back" or mres==0)
{
return "";
}
else
{
return m.get_item_name(mres);
}
}
void serverside_menu(string sndtxt, string menu, string menuitems, int channel=0)
{
//setupmenu();
m.reset(true);
m.click_sound="menumove.ogg";
m.enter_sound="menuenter.ogg";
m.enable_first_letter_navigation=false;
m.enable_multi_letter_navigation=true;
m.wrap=false;
m.enable_up_and_down=true;
m.edge_sound="menuedge.ogg";
m.set_callback(menunet,"");
if(menuitems=="")
return;
string[] items=string_split(menuitems,"[]",false);
for(uint i=0; i<items.length(); i++)
{
string[] parsed=string_split(items[i],":",false);
m.add_item_tts(pu.get_value(parsed[0]),parsed[1]);
}
int mres=m.run(pu.get_value(menu),true);
if(m.get_item_name(mres)=="back" or mres=="0")
{
if(sndtxt!="none")
{
send_reliable(0,sndtxt+" back ",channel);
}
else if(sndtxt=="none")
{

send_reliable(0,"",channel);
}
}
else
{
if(sndtxt!="none")
{
send_reliable(0,sndtxt+" "+m.get_item_name(mres),channel);
}
else if(sndtxt=="none")
{
send_reliable(0,m.get_item_name(mres),channel);
}
}
}
int yesno(string question)
{
setupmenu(false,true);
m.enable_first_letter_navigation=false;
m.enable_multi_letter_navigation=true;
m.set_callback(menunet,"");
m.add_item_tts(pu.get_value("Yes"),"yes");
m.add_item_tts(pu.get_value("no"),"no");
int mres=m.run(question,true);
if (m.get_item_name(mres)=="yes")
return 1;
else
return 2;
}
int qa(string q,string a1,string a2)
{
setupmenu(false,true);
m.enable_first_letter_navigation=false;
m.enable_multi_letter_navigation=true;
m.set_callback(menunet,"");
m.add_item_tts(pu.get_value(a1),"a1");
m.add_item_tts(pu.get_value(a2),"a2");
int mres=m.run(q, true);
if (m.get_item_name(mres)=="a1")
return 1;
else
return 2;
}
string mapmenu()
{
get_characters();
string cl;
speak("Select the destination map");
string result;
string[] menudata=string_split(maplist,"\r\n",false);
int counter=0;
while(true)
{
wait(5);
cl=get_characters();
mainloop();
netloop();
if(counter > menudata.length())
{
counter=menudata.length()-1;
}
if(key_pressed(KEY_UP))
{
if(menudata.length()==1)
{
speak(menudata[0]);
counter=0;
}
else if(counter > 0)
{
counter--;
speak(menudata[counter]);
}
}
if(key_pressed(KEY_DOWN))
{
if(menudata.length()==1)
{
speak(menudata[counter]);
counter=0;
}
else if(counter < menudata.length()-1)
{
counter++;
speak(menudata[counter]);
}
}
if(cl!="" and cl!=" " and cl.length()==1)
{
int f=0;
int oc=counter;
for(uint i=counter; i<menudata.length(); i++)
{
if(i==counter)
{
continue;
}
if(menudata[i][0]==cl)
{
counter=i;
speak(menudata[counter]);
cl="";
f=1;
break;
}
}
if(f==0)
{
counter=0;
for(uint i=counter; i<menudata.length(); i++)
{
if(menudata[i][0]==cl)
{
counter=i;
speak(menudata[counter]);
cl="";
f=1;
break;
}
}
}
if(f==0)
{
speak("No such map exists");
}
}
if(key_pressed(KEY_RETURN) or key_pressed(KEY_NUMPADENTER) and menudata[counter]!="" and counter <= menudata.length()-1)
{
result=menudata[counter];
break;
}
if(key_pressed(KEY_ESCAPE))
{
speak("canceld");
break;
}
}
return result;
}

void set_lang()
{
string temp=langmenu();
if(temp=="")
{
speak("No action will be taken");
optionsmenu();
}
else
{
lang=temp;
pu.set_file("lang/"+lang+".lng");
optionsmenu();
}
}
string langmenu()
{
if(!directory_exists("lang"))
{
dlg("Could not find languages");
return "";
}
string[] lngfiles=find_files("lang/*.lng");
if(lngfiles.length()<=0)
{
dlg("No languages found");
return "";
}
setupmenu();
m.speak_position_information=true;
for(uint i=0; i<lngfiles.length(); i++)
{
m.add_item_tts(string_replace(lngfiles[i],".lng","",true),lngfiles[i]);
}
int mres=m.run("Select your language",true);
if(mres<=0)
{
return "";
}
else return string_trim_right(m.get_item_name(mres),4);
}
