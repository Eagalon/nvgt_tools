#include "mapdata.nvgt"
string custom_menu(string message, string include_list,string parser="\r\n")
{
//get_characters();
//string char;
string test;
/*if (enable_first_letter_navigation==true and first_letter_navigation==1 or enable_multi_letter_navigation==true and multi_letter_navigation==1)*/
get_characters();
string char;
string multichar;
//string test;
speak(message);
string result;
string[] cs=string_split(include_list,parser,true);
int position=0;
while(true)
{
wait(5);
if(in_game==true)
{
netloop();
mainloop();
}
if(position > cs.length())
{
position=cs.length()-1;
}
if(key_pressed(KEY_UP))
{
if(cs.length()==1)
{
speak(cs[0]);
position=0;
menusound.volume=-6;
menusound.stream("sounds\\"+cs[position]+".ogg");
menusound.play();
}
else if(position > 0)
{
position--;
speak(cs[position]);
menusound.volume=-6;
menusound.stream("sounds\\"+cs[position]+".ogg");
menusound.play();
}
}
if(key_pressed(KEY_HOME))
{
if(cs.length()==1)
{
position=0;
speak(cs[position]);
}
else if(position > 0)
{
position=0;
speak(cs[position]);
menusound.stop();
menusound.volume=-6;
menusound.stream("sounds\\"+cs[position]+".ogg");
menusound.play();

}
}
if(key_pressed(KEY_END))
{
if(cs.length()==1)
{
position=0;
speak(cs[position]);
menusound.stop();
menusound.volume=-6;
menusound.stream("sounds\\"+cs[position]+".ogg");
menusound.play();
}
else if(position < cs.length()-1)
{
position=cs.length()-1;
speak(cs[position]);
menusound.stop();
menusound.volume=-6;
menusound.stream("sounds\\"+cs[position]+".ogg");
menusound.play();
}
}
if(key_pressed(KEY_DOWN))
{
if(cs.length()==1)
{
speak(cs[position]);
menusound.volume=-6;
menusound.stream("sounds\\"+cs[position]+".ogg");
menusound.play();
position=0;
}
else if(position < cs.length()-1)
{
position++;
speak(cs[position]);
menusound.volume=-6;
menusound.stream("sounds\\"+cs[position]+".ogg");
menusound.play();
}
}
if(multinav_timer.elapsed>1000 and multichar!="")
multichar="";
string c=get_characters();
if(c!="" and !string_is_digits(c) and multichar!=c)
{
multinav_timer.restart();
multichar+=c;
}
if(multichar!="" and c!="")
{
bool found=false;
for (uint i=position; i<cs.length(); i++)
{
if(position==i) continue;
test=cs[i];
if (string_left(test, multichar.length())==multichar)
{
if(position>0)
{
if(string_left(test, multichar.length())==string_left(cs[position-1], multichar.length()) and multichar.length()>1)
{
found=true;
break;
}
}
position=i;
menusound.volume=-6;
menusound.stream("sounds\\"+cs[position]+".ogg");
menusound.play();
speak(cs[position]);
found=true;
break;
}
else
{
continue;
}
}
if (found==false)
{
for (uint i=0; i<position; i++)
{
test=cs[i];
if (string_left(test, multichar.length())==multichar)
{
if(position>0)
{
if(string_left(test, multichar.length())==string_left(cs[position-1], multichar.length()) and multichar.length()>1)
{
found=true;
break;
}
}
if (position-1<i)
position=i;
else if (position-1>i)
position=i;
speak(cs[position]);
menusound.volume=-6;
menusound.stream("sounds\\"+cs[position]+".ogg");
menusound.play();

break;
}
else
{
continue;
}
}
}
}
//bitti
if(key_pressed(KEY_RETURN) or key_pressed(KEY_NUMPADENTER) and cs[position]!="" and position <= cs.length()-1)
{
result=cs[position];
menusound.stop();
break;
}
if(key_pressed(KEY_ESCAPE))
{
speak("canceld");
menusound.stop();
break;
}
}
return result;
}
string plattypemenu()
{
get_characters();
string char,multichar;
string test;
speak("Select the platform type");
string result;
string[] platforms=string_split(tiletypes,",",false);
int position=0;
while(true)
{
wait(5);
mainloop();
netloop();
if(position > platforms.length())
{
position=platforms.length()-1;
}
if(key_pressed(KEY_HOME))
{
if(platforms.length()==1)
{
if (platforms[0]!="" and platforms[position]!="" and position <= platforms.length()-1) speak(platforms[position]);
position=0;
}
else if(position > 0)
{
position=0;
if (platforms[position]!="" and position <= platforms.length()-1) speak(platforms[position]);
if(string_left(platforms[position],4)=="wall") p.play_stationary(platforms[position]+".ogg",false);
else p.play_stationary(platforms[position]+"step"+random(1, 5)+".ogg",false);
}
}
if(key_pressed(KEY_END))
{
if(platforms.length()==1)
{
if (platforms[position]!="" and position <= platforms.length()-1)speak(platforms[position]);
position=0;
}
else if(position < platforms.length()-1)
{
position=platforms.length()-1;
if (platforms[position]!="" and position <= platforms.length()-1) speak(platforms[position]);
if(string_left(platforms[position],4)=="wall") p.play_stationary("sounds\\"+platforms[position]+".ogg",false);
else p.play_stationary("sounds\\"+platforms[position]+"step"+random(1, 5)+".ogg",false);
}
}
if (key_down(KEY_SPACE) and movetimer.elapsed>=walktime)
{
movetimer.restart();
if(string_left(platforms[position],4)=="wall") p.play_stationary("sounds\\"+platforms[position]+".ogg",false);
else p.play_stationary("sounds\\"+platforms[position]+"step"+random(1, 5)+".ogg",false);
}
if (key_pressed(KEY_F1))
{
p.play_stationary("sounds\\"+platforms[position]+"land.ogg",false);
}
if (key_pressed(KEY_F2))
{
p.play_stationary("sounds\\"+platforms[position]+"fall.ogg",false);
}
if (key_pressed(KEY_F3))
{
p.play_stationary("sounds\\"+platforms[position]+"trip.ogg",false);
}

if(key_pressed(KEY_UP))
{
if(platforms.length()==1)
{
speak(platforms[0]);
position=0;
menusound.volume=-6;
if(string_left(platforms[0],4)=="wall") menusound.stream("sounds\\"+platforms[0]+".ogg");
else menusound.stream("sounds\\"+platforms[0]+"step"+random(1, 5)+".ogg");
menusound.play();
}
else if(position > 0)
{
position--;
speak(platforms[position]);
menusound.volume=-6;
if(string_left(platforms[position],4)=="wall") menusound.stream("sounds\\"+platforms[position]+".ogg");
else menusound.stream("sounds\\"+platforms[position]+"step"+random(1, 5)+".ogg");
menusound.play();
}
}
if(key_pressed(KEY_DOWN))
{
if(platforms.length()==1)
{
speak(platforms[position]);
menusound.volume=-6;
if(string_left(platforms[position],4)=="wall") menusound.stream("sounds\\"+platforms[position]+".ogg");
else menusound.stream("sounds\\"+platforms[position]+"step"+random(1, 5)+".ogg");
menusound.play();
position=0;
}
else if(position < platforms.length()-1)
{
position++;
speak(platforms[position]);
menusound.volume=-6;
if(string_left(platforms[position],4)=="wall") menusound.stream("sounds\\"+platforms[position]+".ogg");
else menusound.stream("sounds\\"+platforms[position]+"step"+random(1, 5)+".ogg");
menusound.play();
}
}
if(multinav_timer.elapsed>1000 and multichar!="")
multichar="";
string c=get_characters();
if(c!="" and multichar!=c)
{
multinav_timer.restart();
multichar+=c;
}
if(multichar!="" and c!="")
{
bool found=false;
for (uint i=position; i<platforms.length(); i++)
{
if(position==i) continue;
test=platforms[i];
if (string_left(test, multichar.length())==multichar)
{
if(position>0)
{
if(string_left(test, multichar.length())==string_left(platforms[position-1], multichar.length()) and multichar.length()>1)
{
found=true;
break;
}
}
position=i;
menusound.volume=-6;
if(string_left(platforms[position],4)=="wall") menusound.stream("sounds\\"+platforms[position]+".ogg");
else menusound.stream("sounds\\"+platforms[position]+"step"+random(1, 5)+".ogg");
menusound.play();
speak(platforms[position]);
found=true;
break;
}
else
{
continue;
}
}
if (found==false)
{
for (uint i=0; i<position; i++)
{
test=platforms[i];
if (string_left(test, multichar.length())==multichar)
{
if(position>0)
{
if(string_left(test, multichar.length())==string_left(platforms[position-1], multichar.length()) and multichar.length()>1)
{
found=true;
break;
}
}
if (position-1<i)
position=i;
else if (position-1>i)
position=i;
speak(platforms[position]);
menusound.volume=-6;
if(string_left(platforms[position],4)=="wall") menusound.stream("sounds\\"+platforms[position]+".ogg");
else menusound.stream("sounds\\"+platforms[position]+"step"+random(1, 5)+".ogg");
menusound.play();

break;
}
else
{
continue;
}
}
}
}
if(key_pressed(KEY_RETURN) or key_pressed(KEY_NUMPADENTER) and platforms[position]!="" and position <= platforms.length()-1)
{
result=platforms[position];
menusound.stop();
break;
}
if(key_pressed(KEY_ESCAPE))
{
speak("canceld");
menusound.stop();
break;
}
}
return result;
}

string pitch_set(string s)
{
string result;
double pitch=100;
double spitch;
speak("Press or hold space to play/pause the track.  Press or hold left and right arrows to change it's pitch. Press or hold r to reset the pitch. Press or hold q to seek backward. Press or hold e to seek forward. Press or hold w to go to the beginning of the track. Press escape to cancel. Press enter to submit");
sound tst;
tst.load("sounds\\"+s+".ogg");
tst.play_looped();
tst.volume=100;
tst.pitch=pitch;
while(true)
{
wait(5);
mainloop();
spitch=pitch;
if(key_pressed(KEY_LEFT)==false and kleft.pressing and pitch>0)
{
pitch+=-1;
tst.pitch=pitch;
speak(pitch);
}
if(key_pressed(KEY_RIGHT)==false and kright.pressing and pitch<200)
{
pitch+=1;
tst.pitch=pitch;
speak(pitch);
}
if(key_pressed(KEY_Q)==false and kq.pressing)
{
tst.seek(tst.position-1000);
}
if(key_pressed(KEY_W)==false and kw.pressing)
{
tst.seek(0);
}
if(key_pressed(KEY_E)==false and ke.pressing)
{
tst.seek(tst.position+1000);
}
if(key_pressed(KEY_R)==false and kr.pressing)
{
pitch=100;
tst.pitch=pitch;
speak("the pitch has been reset. Pitch: 100");
}
if(key_pressed(KEY_SPACE)==false and kspace.pressing)
{
if(tst.playing==true)
{
tst.pause();
}
else
{
tst.play();
}
}
if(key_pressed(KEY_ESCAPE))
{
speak("canceled");
tst.stop();
tst.close();
result="canceled";
break;
}
if(key_pressed(KEY_RETURN))
{
tst.stop();
tst.close();
result=string_to_number(pitch);
speak("pitch has been set "+pitch);
break;
}
}
return result;
}
string srcv(string s)
{
string result;
double volume=0,pitch=100;
double vl,spitch;
speak("Press or hold space to play/pause the track. Press or hold up and down arrows to change the sound volume. Press or hold left and right arrows to change it's pitch. Press or hold r to reset the volume and pitch. Press or hold q to seek backward. Press or hold e to seek forward. Press or hold w to go to the beginning of the track. Press escape to cancel. Press enter to submit");
sound tst;
tst.load("sounds\\"+s+".ogg");
tst.play_looped();
tst.volume=volume+100;
tst.pitch=pitch;
while(true)
{
wait(5);
mainloop();
vl=volume;
spitch=pitch;
if(key_pressed(KEY_DOWN)==false and kdown.pressing and volume>-60)
{
volume+=-1;
tst.volume=volume;
speak(volume);
}
if(key_pressed(KEY_UP)==false and kup.pressing and volume<0)
{
volume+=1;
tst.volume=volume;
speak(volume);
}
if(key_pressed(KEY_LEFT)==false and kleft.pressing and pitch>0)
{
pitch+=-1;
tst.pitch=pitch;
speak(pitch);
}
if(key_pressed(KEY_RIGHT)==false and kright.pressing and pitch<200)
{
pitch+=1;
tst.pitch=pitch;
speak(pitch);
}
if(key_pressed(KEY_Q)==false and kq.pressing)
{
tst.seek(tst.position-1000);
}
if(key_pressed(KEY_W)==false and kw.pressing)
{
tst.seek(0);
}
if(key_pressed(KEY_E)==false and ke.pressing)
{
tst.seek(tst.position+1000);
}
if(key_pressed(KEY_R)==false and kr.pressing)
{
volume=0;
pitch=100;
tst.volume=volume;
tst.pitch=pitch;
speak("the volume and pitch has been reset. Volume: 0. Pitch: 100");
}
if(key_pressed(KEY_SPACE)==false and kspace.pressing)
{
if(tst.playing==true)
{
tst.pause();
}
else
{
tst.play();
}
}
if(key_pressed(KEY_ESCAPE))
{
speak("canceled");
tst.stop();
tst.close();
result="canceled";
break;
}
if(key_pressed(KEY_RETURN))
{
tst.stop();
tst.close();
result=volume+":"+pitch;
break;
}
}
return result;
}
