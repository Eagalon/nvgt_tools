
uint peer_id=0;
timer connectiontimer;
int connectiontime=5000;
void login()
{
if(name=="" or password=="")
{
dlg("You need to setup an account first.");
mainmenu();
}
connectiontimer.restart();
if(!SCRIPT_COMPILED)
speak("Connecting to "+netaddress);
else
speak("Connecting");
host.setup_client(20, 500);
host.connect(netaddress,netport);
while(true)
{
wait(5);
e=host.request();
if (key_pressed(KEY_ESCAPE))
{
reset_network();
mainmenu();
}
if(connectiontimer.elapsed>connectiontime and connected==false)
{
alert("Error","Server lost");
reset_network();
mainmenu();
}
if(e.type==event_connect)
{
speak("Logging in");
peer_id=e.peer_id;
send_reliable(0, "login "+name+" "+password+" "+ver+" "+compid, 0);
connected=true;
}
else if(e.type==event_receive and get_event_message()=="loggedin")
{
sourcecheckloop();
positions();
spd.reset();
game();
}
else if(e.type==event_receive and get_event_message()=="alreadyin")
{
dlg("This account is already logged in. Please try again later.");
reset_network();
mainmenu();
}
else if(e.type==event_receive and get_event_message()=="doesnotexist")
{
dlg("This account doesn't exist. Check your username to make sure it is correct.");
reset_network();
mainmenu();
}
else if(e.type==event_receive and get_event_message()=="wrongpass")
{
dlg("This password is invalid.");
reset_network();
mainmenu();
}
else if(e.type==event_receive and get_event_message()=="oldver")
{
dlg("This version of bloodbath is no longer compattible. Please update to the latest version in order to continue playing.");
reset_network();
mainmenu();
}
else if(e.type==event_receive and get_event_message()=="banned")
{
dlg("You have been banned.");
reset_network();
mainmenu();
}
else if(e.type==event_receive)
{
string[] parsed=string_split(get_event_message(), " ", false);
if(parsed[0]=="x")
{
me.x=string_to_number(parsed[1]);
}
else if(parsed[0]=="y")
{
me.y=string_to_number(parsed[1]);
}
else if(parsed[0]=="z")
{
me.z=string_to_number(parsed[1]);
}
else if(parsed[0]=="motd")
{
motd=string_replace(get_event_message(), "motd ", "", false);
}
else if(parsed[0]=="mapdata")
{
load_map(string_replace(get_event_message(), "mapdata ", "", false));
}
else if(parsed[0]=="facing")
{
facing=string_to_number(parsed[1]);
}
}
}
}
void create()
{
string user=v.input("Enter the username you would like. No spaces.","");
string pass=v.input("Enter the password you would like. No spaces.", "",false, true);
if(user=="" or pass=="" or string_contains(user," ",1)!=-1 or string_contains(pass," ",1)!=-1)
{
dlg("The account information provided is not valid. Please try again.");
mainmenu();
}
connectiontimer.restart();
if(!SCRIPT_COMPILED)
speak("Connecting to "+netaddress);
else
speak("Connecting");
host.setup_client(20, 500);
host.connect(netaddress,netport);
while(true)
{
wait(5);
e=host.request();
if(connectiontimer.elapsed>connectiontime and creating==false)
{
alert("Error","Server lost");
reset_network();
mainmenu();
}
if(e.type==event_connect and creating==false)
{
creating=true;
speak("Creating account");
peer_id=e.peer_id;
send_reliable(0,"create "+user+" "+pass,0);
}
if(e.type==event_receive and get_event_message()=="alreadyexists")
{
dlg("An account with this name already exists. Please try again with a different username.");
reset_network();
mainmenu();
}
else if(e.type==event_receive and get_event_message()=="created")
{
dlg("Your account was created successfully! Press enter to login to it.");
name=user;
password=pass;
writeprefs();
reset_network();
creating=false;
login();
}
}
}
void reset_network()
{ 
host.disconnect_peer(0);
//timeouttimer.restart();
peer_id=0;
host.destroy();
//prior_connected=false;
connected=false;
@host=null;
network t;
@host=t;
}

