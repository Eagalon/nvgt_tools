void bloodbathloop() 
{
if(autotracking==true and autotracktimer.elapsed>=100 and trackplayer!="") {
autotracktimer.restart();
int ind=get_player_index(trackplayer);
if(ind<0) {
p.play_stationary("sounds\\trackgone.ogg",false);
speak("The tracked player has disconnected");
trackplayer="";
autotracking=false;
}
else {
tell_where(players[ind].x,players[ind].y,players[ind].z,players[ind].map,false);
}
}
for(uint i=0; i<players.length(); i+=1) {
if(players[i].btimer.elapsed>=750 and beacons==1 and players[i].map==mapname and players[i].name!=name) {
players[i].btimer.restart();
p.play_3d("sounds\\beacon.ogg",me.x,me.y,me.z,players[i].x,players[i].y,players[i].z,calculate_theta(facing),false);
}
}
if(key_pressed(KEY_RETURN))
{
if(shift_is_down()&&!alt_is_down())
{
send_reliable(0,"travel",0);
}
}
if(key_down(KEY_G))
{
if(key_pressed(KEY_T))
{
playcamera();
}
if(key_pressed(KEY_D))
{
string msg;
string list;
string [] pnames;
string gt=gct();
msg+=(gt==""||gt=="blank" ? "air" : gt)+" at "+round(camera.x,0)+", "+round(camera.y,0)+", "+camera.z;
for(int i=0; i<players.length(); i++)
{
if(players[i].x==camera.x and players[i].y==camera.y and players[i].z==camera.z and players[i].map==mapname)
{
pnames.insert_last(players[i].name);
}
}
if(!pnames.is_empty()) list="players: "+convert_to_list(pnames);
msg+="\r\n "+list;
speak(msg);
}
if(kpgdn.pressing)
{
camera.z-=1;
playcamera();
}
if(kpgup.pressing and camera.z<max.z)
{
camera.z+=1;
playcamera();
}
if(kleft.pressing and camera.x>0)
{
cameramove("Left");
}
if(kright.pressing and camera.x<max.x)
{
cameramove("Right");
}
if(kdown.pressing and camera.y>0)
{
cameramove("Backward");
}
if(kup.pressing and camera.y<max.y)
{
cameramove("Forward");
}
}
if (key_up(KEY_G))
{
camera.x=me.x;
camera.y=me.y;
camera.z=me.z;
}
double mastervol=get_sound_master_volume();
if(key_pressed(KEY_HOME) and mastervol<0)
{
set_sound_master_volume(mastervol+=1);
speak(round(get_sound_master_volume(),0)+60);
}
if(key_pressed(KEY_END) and mastervol>-100)
{
set_sound_master_volume(mastervol-=1);
speak(round(get_sound_master_volume(),0)+60);
}
if(key_pressed(KEY_B))
{
if(alt_is_down())
{
send_reliable(0,"build",0);
}
else speak("Current location: "+(currentloc!=""?currentloc:"Uncharted area"));
}
if(key_pressed(KEY_W))
{
if(trackplayer=="") {
speak("Not tracking anyone");
}
else {
int index=get_player_index(trackplayer);
if(index>-1)
if(shift_is_down()) {
if(autotracking==true) {
autotracking=false;
speak("autotracking disabled");
}
else {
autotracking=true;
autotracktimer.restart();
speak("autotracking enabled");
}
}
else
tell_where(players[index].x,players[index].y,players[index].z,players[index].map);
else {
speak("the tracked player is no longer online");
trackplayer="";
}
}
}
if(key_pressed(KEY_F1))
{
send_reliable(0,"motd",0);
}
if(key_pressed(KEY_F2))
{
send_reliable(0,"uptime",0);
}
if(key_pressed(KEY_F3) and pinging==false)
{
p.play_stationary("sounds\\pingstart.ogg",false);
speak("Pinging.");
pinging=true;
pingtimer.restart();
send_reliable(0,"ping",0);
}
if(key_pressed(KEY_F4))
{
if(beacons==1)
{
beacons=0;
speak("Beacons disabled.");
}
else
{
beacons=1;
speak("Beacons enabled.");
}
}
if(key_pressed(KEY_F5)&&!alt_is_down()) send_reliable(0,"lchannel",0);
if(key_pressed(KEY_SPACE) and jumping==false and falling==false and can_move==true)
{
p.play_stationary("sounds\\jump.ogg", false);
send_reliable(0, "jump", 0);
jumping=true;
jumptimer.restart();
jumpup=1;
jumplandz=me.z;
}
if(key_pressed(KEY_I) and can_move==true&&sleepmode==-1)
{
if(inventory==""||invlist=="")
{
speak(pu.get_value("no items"));
}
else
{
send_reliable(0,"invopen",0);
position=0;
invmenu(invcat[invcatpos]);
}
}
if(can_move) {
if(key_pressed(KEY_Q))
{
facing=snapleft(facing, getdir(facing));
speak(dir_to_string(getdir(facing)));
send_reliable(0,"facing "+facing,0);
}
if(key_pressed(KEY_E))
{
facing=snapright(facing, getdir(facing));
speak(dir_to_string(getdir(facing)));
send_reliable(0,"facing "+facing,0);
}
}
if(key_pressed(KEY_H))
{
send_reliable(0,"healthcheck",0);
}
if (key_pressed(KEY_EQUALS))
{
string chat=v.input("Type a command here.","", true, false);
if (chat!="")
send_reliable(0,chat,1);
}
if (key_pressed(KEY_SLASH))
{
if(shift_is_down())
{
send_reliable(0,"whoonline",0);
}
else
{
string chat=v.input("Type your message here.","", true, false);
if (chat!="")
send_reliable(0,chat,2);
}
}
if (key_pressed(KEY_LBRACKET))
{
if (key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
firstbuffer();
}
else
{
bufferleft();
}
}
if (key_pressed(KEY_RBRACKET))
{
if (key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
lastbuffer();
}
else
{
bufferright();
}
}
if (key_up(KEY_LSHIFT) and key_up(KEY_RSHIFT))
{
if (key_pressed(KEY_COMMA))
{
prevbufferitem();
}
if (key_pressed(KEY_PERIOD))
{
nextbufferitem();
}
}
if (key_down(KEY_LSHIFT) or key_down(KEY_RSHIFT))
{
if (key_pressed(KEY_COMMA))
{
topbufferitem();
}
if (key_pressed(KEY_PERIOD))
{
bottombufferitem();
}
}
if(key_pressed(KEY_P)) send_reliable(0,"whonear",0);
if(key_pressed(KEY_ESCAPE) and falling==false and jumping==false and can_move==true)
{
if(ask_too_exit==1)
{
int e;
e=yesno("Are you sure you want to exit?");
if(e==1)
{
speak(pu.get_value("Disconnecting from server..."));
send_reliable(0, "close", 0);
x=true;
xtimer.restart();
}
}
else{
speak(pu.get_value("Disconnecting from server..."));
send_reliable(0, "close", 0);
x=true;
xtimer.restart();
}
}
if(xtimer.elapsed>2500 and x==true)
{
reset_game();
mainmenu();
}
if(key_pressed(KEY_C))
{
speak(mr.x+", "+mr.y+", "+me.z);
}
if(key_pressed(KEY_F))
{
speak("You are facing "+dir_to_string(getdir(facing)));
}
if(movetimer.elapsed>movetime and !shift_is_down() and can_move==true and key_up(KEY_G))
{
/*
if(key_down(KEY_PRIOR) and jumping==false)
{
movetimer.restart();
move(Up);
}
else if(key_down(KEY_NEXT) and jumping==false)
{
movetimer.restart();
move(Down);
}
*/
if(key_down(KEY_UP))
{
movetimer.restart();
move("Forward");
}
else if(key_down(KEY_DOWN))
{
movetimer.restart();
move("Backward");
}
else if(key_down(KEY_LEFT))
{
movetimer.restart();
move("Left");
}
else if(key_down(KEY_RIGHT))
{
movetimer.restart();
move("Right");
}
}

/*
keylist=keys_pressed();
for(uint i=0; i<keylist.length(); i++)
{
if (keylist[i]>=2 and keylist[i]<=14 and weapons.length()>keylist[i]-2 and i==0)
{
if (w<0)
{
if(w!=keylist[i]-2)
{
w=keylist[i]-2;
speak(weapons[w]);
send_reliable(0, "draw "+weapons[w], 0);
}
}
else if (w>=0)
{
if(w!=keylist[i]-2)
{
w=keylist[i]-2;
speak(weapons[w]);
send_reliable(0, "draw "+weapons[w], 0);
}
}
}
}
*/
}
void positions()
{
distpool.update_listener_3d(me.x, me.y, me.z, calculate_theta(facing));
p.update_listener_3d(me.x, me.y, me.z, calculate_theta(facing));
itempool.update_listener_3d(me.x, me.y, me.z, calculate_theta(facing));
mpool.update_listener_3d(me.x, me.y, me.z, calculate_theta(facing));
sourcepool.update_listener_3d(me.x, me.y, me.z, calculate_theta(facing));
}
void checkloc()
{
if(get_zone_at(me.x, me.y, me.z)!="")
{
string zone=get_zone_at(me.x, me.y, me.z);
if(currentloc!=zone)
{
currentloc=zone;
speak(currentloc);
send_reliable(0,"update_zone "+currentloc,0);
}
}
else if(get_zone_at(me.x, me.y, me.z)=="" and currentloc!="")
{
speak("Uncharted area");
currentloc="";
}
}
void fade_pool_out(sound_pool@ pool, bool destroy=true)
{
int volume=0;
while(volume>-20)
{
volume--;
for (uint i=0; i<pool.items.length(); i++)
{
if (@pool.items[i].handle!=null)
pool.items[i].handle.volume=volume;
}
wait(20);
}
if(destroy)
pool.destroy_all();
}
void fade_pool_in(sound_pool@ pool)
{
int volume=-20;
while(volume<0)
{
volume++;
for (uint i=0; i<pool.items.length(); i++)
{
if (@pool.items[i].handle!=null)
pool.items[i].handle.volume=volume;
}
wait(20);
}
}
void game()
{
x=false;
xtimer.restart();
send_reliable(0, "spawn_player "+me.x+" "+me.y+" "+me.z+" "+mapname+" "+name, 0);
if(!SCRIPT_COMPILED)
send_reliable(0,"devlogin",0);
send_reliable(0,"compinfo "+read_environment_variable("username")+" "+read_environment_variable("computername")+" ",0);
in_game=true;
while(true)
{
wait(5);
bloodbathloop();
mainloop();
netloop();
positions();
}
}
