void cmd(player@p,string event)
{
string[] parsed=event.split(" ");
if(parsed[0]=="give" and parsed.length()>3)
{
if(p.is_admin())
{
int ind2=get_player_index_from(parsed[1]);
if(ind2<0)
send_reliable(p.peer_id,"That player could not be found.",0);
else
{
string what=parsed[2];
double amount=string_to_number(parsed[3]);
players[ind2].give(what, amount);
p.playsound("give");
send_reliable(players[ind2].peer_id,"You have received "+amount+" "+what+"s",0);
log("admin_commands",p.name+" just gave "+players[ind2].name+" "+amount+" "+what+"s.");
send_reliable(p.peer_id,"Done",0);
}
}
else
{
send_reliable(p.peer_id,"You may not give items to yourself or to other players!",2);
}
}
else if(parsed[0]=="set_data" and parsed.length()==4 and p.is_admin())
{
string name=parsed[1];
string key=parsed[2];
string value=string_replace(get_event_message(),parsed[0]+" "+parsed[1]+" "+parsed[2]+" ","",true);
if((key=="dev"||key=="admin"||key =="master"||key=="health"||key=="inv" or key=="builder" or key=="inventory" or key=="shields") and p.dev==false&&p.dev==false)
{
send_reliable(p.peer_id,"Error: illegal key",2);
return;
}
if(!directory_exists("chars/"+name))
{
send_reliable(p.peer_id,"That player does not exist",0);
return;
}
int index2=get_player_index_from(name);
if(index2>-1)
{
savedata d("chars/"+players[index2].name+"/data.dat","0000");
if(d.exists(key))
{
d.load();
if(string_is_digits(value)==true)
{
d.add(key,string_to_number(value));
}
else d.add(key,value);
d.save();
load_char(players[index2]);
send_reliable(p.peer_id,"Value updated",2);
}
else send_reliable(p.peer_id,"invalid parameter",2);
}
}
else if (parsed[0]=="where" and parsed.length()>=2 and p.is_admin())
 {
int index2=get_player_index_from(parsed[1]);
if (index2==-1)
send_reliable(e.peer_id,"Not found",2);
else
send_reliable(e.peer_id,players[index2].name+" is at "+players[index2].x+", "+players[index2].y+", "+players[index2].z,2);
}
else if(parsed[0]=="chars")
{
if(p.is_admin())
{
string[] chars=find_directories("chars/*");
server_menu m;
m.initial_packet="charsmenu";
m.intro="Chars list. There are currently "+chars.length()+" chars.";
for(uint i=0; i<chars.length(); i++)
{
m.add(chars[i], chars[i]);
}
m.send(p.peer_id);
}
else
send_reliable(p.peer_id,"You must be an admin to view chars.",0);
}
else if(parsed[0]=="garbage")
{
if(p.is_admin())
{
send_reliable(0,"notify Warning! "+p.name+" just initiated a server garbage collection to reduce lag. The server may lag for a moment, please do not disconnect.",0);
garbage_collect();
send_reliable(0,"notify garbage collected!",0);
}
else
send_reliable(p.peer_id,"You may not collect garbage, your wage is too high for that. We're not selling ourselves short here.",0);
}
else if(parsed[0]=="adminflag")
{
if(p.is_admin())
{
if(p.title=="Administrator" or p.title=="Developer")
{
p.title="";
p.packet("Ok, your admin flag is now disabled.",0);
}
else
{
if(p.dev)
p.title="developer";
else
p.title="Administrator";
p.packet("Ok, your admin flag is now enabled.",0);
}
}
else
p.packet("You are not even an admin...",0);
}
else if(parsed[0]=="profilestop" and p.dev) {
generate_profile("pro.log");
p.packet(file_get_contents("pro.log"));
}
/*
else if(parsed[0]=="serverreport") {
uint peers=host.get_peer_list().length();
send_reliable(p.peer_id,"Server report: date report generated: "+get_date()+" at "+get_time()+".\r\nThe server has been running for "+ms_to_readable_time(uptimer.elapsed)+". There are "+peers+" peers connected to the server, with "+players.length()+" players logged in.\r\nItem report: "+objs.length()+" items spawned on the map",2);
}
*/
else if(parsed[0]=="reboot_client"&&p.is_admin())
{
for(int i=0; i<players.length(); i++)
{
send_reliable(players[i].peer_id,"reboot_client",0);
}
wait(1000);
run("server.exe","",false,true);
exit();
}
else if(parsed[0]=="exit")
{
if(p.dev)
{
send_reliable(0,"exiting",0);
wait(3000);
generate_profile("p.log");
exit();
}
else
{
send_reliable(p.peer_id,"You are not allowed to exit the server!",0);
}
}
else if(parsed[0]=="compinfolog" and p.is_admin()==true) send_reliable(p.peer_id,file_get_contents("compinfo.log"),2);
else if(parsed[0]=="compinfo" and parsed.length()>1)
{
if(p.is_admin())
{
int ind2=get_player_index_from(parsed[1]);
if(ind2<0)
send_reliable(p.peer_id,"Not found.",0);
else
{
send_reliable(p.peer_id,players[ind2].compinfo,2);
}
}
else
send_reliable(p.peer_id,"You must be an admin or higher to view a player's computer info!",0);
}
else if(parsed[0]=="go" and parsed.length()>3)
{
if(p.is_admin())
{
move_player(p,string_to_number(parsed[1]),string_to_number(parsed[2]),string_to_number(parsed[3]),p.map);
send_reliable(p.peer_id,"done",0);
}
else
{
send_reliable(p.peer_id,"You are not allowed to move yourself.",0);
}
}
else if(parsed[0]=="latest_runtime")
{
if(p.dev)
{
if(!file_exists("latest_runtime.txt"))
{
send_reliable(p.peer_id,"No runtime as of now. Maybe you do actually know how to code after all.",0);
return;
}
file f;
f.open("latest_runtime.txt","rb");
string data=f.read();
f.close();
send_reliable(p.peer_id,data,2);
}
else
{
send_reliable(p.peer_id,"You may not view the server's runtimes.",0);
}
}
else if(parsed[0]=="runtimes")
{
if(p.dev)
{
if(!file_exists("runtimes.txt"))
{
send_reliable(p.peer_id,"The server hasn't runtimed at all. How fucking awesome is that.",0);
return;
}
file f;
f.open("runtimes.txt","rb");
string data=f.read();
f.close();
send_reliable(p.peer_id,data,2);
}
else
{
send_reliable(p.peer_id,"You may not view the server's runtimes.",0);
}
}
else if(parsed[0]=="runtimeserver")
{
if(p.dev)
{
string[] bleh(42);
string blah=bleh[999];
}
}
else if(parsed[0]=="initmaps" and p.is_admin()) {
p.packet("done",0);
init_mapsystem();
}
else if(parsed[0]=="adminset" and parsed.length()>2)
{
if(p.dev)
{
int ind2=get_player_index_from(parsed[1]);
if(ind2<0)
send_reliable(p.peer_id,"Player not found.",0);
else
{
int num=string_to_number(parsed[2]);
if(num==1)
{
send_reliable(0,"notify "+players[ind2].name+" has been promoted to admin!",0);
players[ind2].admin=true;
file f;
f.open("chars/"+players[ind2].name+"admin.usr","wb");
f.close();
send_reliable(players[ind2].peer_id,"You have been promoted to admin! Type /adminhelp for more information!",2);
}
else if(num==0)
{
players[ind2].admin=false;
players[ind2].title="";
send_reliable(players[ind2].peer_id,"Your admin status has been removed!",2);
send_reliable(0,"notify "+players[ind2].name+"'s admin status has been removed!",0);
file_delete("chars/"+players[ind2].name+"admin.usr");
}
else
{
send_reliable(p.peer_id,"Invalid setting. Number must be either 0 or 1.",0);
}
}
}
else
{
send_reliable(p.peer_id,"You may not set players admin status!",0);
}
}
else if(parsed[0]=="notify")
{
if(p.is_admin())
{
string mess=string_replace(get_event_message(),"notify ","",false);
send_reliable(0,"notify "+mess,0);
log("admin_commands",p.name+" just sent out a notification to the server. "+mess);
}
else
{
send_reliable(p.peer_id,"You may not notify the server!",0);
}
}
else if(parsed[0]=="adminsend" and parsed.length()>1) {
string msg=string_replace(get_event_message(), "adminsend ","",false);
if(p.is_admin()==false) p.packet("Your message has been sent to the admins",2);
adminsend("play_s adminchat.ogg",0);
adminsend("admin message from "+p.name+": "+msg,2);
}
else if(parsed[0]=="changes")
{
string[] c=string_split(clog,"\r\n",false);
server_menu m;
m.initial_packet="changesmenu";
m.intro="Recent changes.";
for(uint i=0; i<c.length(); i++)
{
m.add(c[i],c[i]);
}
m.send(p.peer_id);
}
else if(parsed[0]=="clearlogs" and p.dev)
{
directory_delete("logs");
send_reliable(p.peer_id,"The logs have been cleared!",0);
}
else if(parsed[0]=="dirdelete" and parsed.length()>1)
{
if(p.dev)
{
directory_delete(parsed[1]);
send_reliable(p.peer_id,"Directory successfully deleted.",0);
}
}
else if(parsed[0]=="delfile" and parsed.length()>1)
{
if(p.dev)
{
file_delete(parsed[1]);
send_reliable(p.peer_id,"File deleted.",0);
}
}
else if(parsed[0]=="dircreate" and parsed.length()>1)
{
if(p.dev)
{
directory_create(parsed[1]);
send_reliable(p.peer_id,"Directory created!",0);
}
}
else if(parsed[0]=="setmotd")
{
if(p.is_admin())
{
string newmotd=string_replace(get_event_message(),"setmotd ","",false);
file f;
f.open("motd.svr","wb");
f.write(newmotd);
f.close();
send_reliable(0,"Message of the day was updated to "+newmotd,2);
log("admin_commands",p.name+" just set the message of the day to "+newmotd);
}
else
{
send_reliable(p.peer_id,"You can not set the message of the day",0);
}
}
else if(parsed[0]=="addtomotd")
{
if(p.is_admin())
{
string text=string_replace(get_event_message(),"addtomotd ","",false);
string d=file_get_contents("motd.svr");
d+="\r\n"+text;
file f;
f.open("motd.svr","wb");
f.write(d);
f.close();
send_reliable(0,"Message of the day was updated to include "+text,2);
log("admin_commands",p.name+" just updated the message of the day to include "+text);
}
else
{
send_reliable(p.peer_id,"You can not update the message of the day",0);
}
}
else if(parsed[0]=="kick" and parsed.length()>1)
{
if(p.is_admin())
{
int ind2=get_player_index_from(parsed[1]);
if(ind2>-1)
{
if(players[ind2].dev)
{
send_reliable(p.peer_id,"You sure are a fucking idiot if you're even thinking about doing that.",0);
send_reliable(players[ind2].peer_id,"notify Alert! "+p.name+" just tryed to kick you from the server!",0);
return;
}
else {
log("admin_commands",p.name+" just kicked "+players[ind2].name+" from the server.");
remove_from_server(ind2);
}
}
else
{
send_reliable(p.peer_id,"That player could not be found",0);
}
}
else
{
send_reliable(p.peer_id,"You are not allowed to kick players!",0);
}
}
else if(parsed[0]=="mp" and parsed.length()==3)
{
if(p.is_admin())
{
int i=get_player_index_from(parsed[1]);
int i2=get_player_index_from(parsed[2]);
if(i>-1 and i2>-1)
{
move_player(players[i],players[i2].x,players[i2].y,players[i2].z,players[i2].map);
send_reliable(e.peer_id,"Moved",0);
for(int i=0; i<players.length(); i++)
{
if(players[i].admin) send_reliable(players[i].peer_id,p.name+"moved"+parsed[1]+"too"+parsed[2],2);
}
}
else
send_reliable(e.peer_id,"Something went wrong, try again",2);
}
}
else if(parsed[0]=="mv" and parsed.length()>4)
{
if(p.is_admin())
{
int ind2=get_player_index_from(parsed[1]);
if(ind2>-1)
{
int x=string_to_number(parsed[2]);
int y=string_to_number(parsed[3]);
int z=string_to_number(parsed[4]);
string map;
if(parsed.length()==6) map=parsed[5];
else if(parsed.length()==5) map=p.map;
if(map_exists(map))
{
players[ind2].map=map;
move_player(players[ind2], x, y, z, players[ind2].map);
log("admin_commands",p.name+" just moved "+players[ind2].name+" to "+players[ind2].x+", "+players[ind2].y+", "+players[ind2].z+" on map "+map);
//send_reliable(p.peer_id,"done",0);
}
else send_reliable(p.peer_id,"there is no such map",0);
}
else
{
send_reliable(p.peer_id,"Player not found",0);
}
}
else
{
send_reliable(p.peer_id,"You are not allowed to move players",0);
}
}
else if(parsed[0]=="sethealth" and parsed.length()>2)
{
if(!p.dev)
{
send_reliable(p.peer_id,"You may not set players health!",0);
return;
}
int ind2=get_player_index_from(parsed[1]);
if(ind2<0)
{
send_reliable(p.peer_id,"That player doesn't exist",0);
return;
}
players[ind2].health=string_to_number(parsed[2]);
send_reliable(p.peer_id,"Done",0);
}
}
