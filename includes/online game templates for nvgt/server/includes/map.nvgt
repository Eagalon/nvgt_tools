bool remove_map(string mapname)
{
int id=get_map_index(mapname);
bool delete=true;
if(id>-1)
{
for(uint i=0; i<players.length(); i++)
{
/*
if(players[i].map==mapname)
move_player(players[i],0,0,0,main_map,false);
*/
}
@maps[id]=null;
maps.remove_at(id);
file_delete("maps/"+mapname+".map");
init_mapsystem();
return delete;
}
else
{
return false;
}
}

dictionary mapindexes;
mapdata@[] maps(0);
class mapdata
{
string name;
bool is2d=false;
int minhour=0, maxhour=24;
maptile@[] maptiles;
string rawdata;vector max;
mapdata(string loadname)
{
internal_load(loadname);
}
bool tile_exists(double x, double y, double z)
{
for(uint i=0; i<maptiles.length(); i++)
{
if(maptiles[i].is_on_tile(x, y, z))
return true;
}
return false;
}
string return_tile(double x, double y, double z)
{
string outval;
for(uint i=0; i<maptiles.length(); i++)
{
if(maptiles[i].is_on_tile(x, y, z))
{
outval=maptiles[i].type;
}
}
return outval;
}
void internal_load(string loadname)
{
file f;
f.open("maps/"+loadname+".map", "rb");
rawdata=f.read();
string[] map=delinear(rawdata);
f.close();
for(uint i=0; i<map.length(); i++)
{
string[] parsed=map[i].split(":");
if(parsed[0]=="mapname")
{
name=parsed[1];
}
else if(parsed[0]=="maxx") max.x=string_to_number(parsed[1]);
else if(parsed[0]=="maxy") max.y=string_to_number(parsed[1]);
else if(parsed[0]=="maxz") max.z=string_to_number(parsed[1]);
else if(parsed[0]=="platform" and parsed.length()>6)
{
int minx=string_to_number(parsed[1]);
int maxx=string_to_number(parsed[2]);
int miny=string_to_number(parsed[3]);
int maxy=string_to_number(parsed[4]);
int z=string_to_number(parsed[5]);
string type=parsed[6];
maptile temp;
temp.minx=minx;
temp.maxx=maxx;
temp.miny=miny;
temp.maxy=maxy;
temp.minz=z;
temp.maxz=z;
temp.type=type;
maptiles.insert_last(temp);
}
}
}
void loop()
{
}
}
class maptile
{
int minx;
int maxx;
int miny;
int maxy;
int minz;
int maxz;
string type;
bool is_on_tile(double x, double y, double z)
{
if(minx>x)
{
return false;
}
if(minx<=x and maxx>=x and miny<=y and maxy>=y and minz<=z and maxz>=z)
{
return true;
}
return false;
}
}


string get_tile_at(int x, int y, int z, string mapname, bool includeglobal=true)
{
string outval;
if(includeglobal==true)
{
int index=get_map_index(mapname);
if(index<0)
{
return "";
}
else
{
outval=maps[index].return_tile(x, y, z);
}
}
return outval;
}
string linear(string[] a)
{
string final;
for(uint i=0; i<a.length(); i++)
{
final+=(a[i]+"\r\n");
}
return final;
}
string[] delinear(string a)
{
return a.split("\r\n");
}
string select_random_map()
{
string[] maps=find_files("maps/*.map");
string[] finalmaps;
for(uint i=0; i<maps.length(); i++)
{
file f;
f.open("maps/"+maps[i], "rb");
if(string_contains(f.read(), "inselection", 1)>-1)
{
finalmaps.insert_last(maps[i]);
}
}
return string_replace(finalmaps[random(0, finalmaps.length()-1)], ".map", "", true);
}
string get_map_data(string map, string data)
{
if(!file_exists("maps/"+map+".map"))
{
return "";
}
file f;
f.open("maps/"+map+".map", "rb");
string[] mdata=string_split(f.read(), "\r\n", true);
for(uint i=0; i<mdata.length(); i++)
{
string[] p=string_split(mdata[i], ":", true);
if(p[0]==data)
{
return string_replace(mdata[i], data+":", "", false);
}
}
return "";
}
bool tile_exists(double x, double y, double z, string mapname)
{
int index=get_map_index(mapname);
if(index<0)
{
return false;
}
else
{
return maps[index].tile_exists(x, y, z);
}
}
void init_mapsystem()
{
maps.resize(0);
string[] mapfiles=find_files("maps/*.map");
for(uint i=0; i<mapfiles.length(); i++)
{
string workingname=string_replace(mapfiles[i], ".map", "", true);
mapdata temp(workingname);
maps.insert_last(temp);
refresh_map_list();
}
}
int get_map_index(string mn) {
if(mapindexes.exists(mn)==false) return -1;
else {
int temp;
mapindexes.get(mn,temp);
return temp;
}
}
int getmap_by_name(string name)
{
for(uint i=0; i<maps.length(); i++)
{
if(maps[i].name==name)
{
return i;
}
}
return -1;
}
void refresh_map_list() {
mapindexes.delete_all();
for(uint i=0; i<maps.length(); i+=1) {
mapindexes.set(maps[i].name, i);
}
}
vector get_max_values(string mapname)
{
int ind=get_map_index(mapname);
vector temp;
if(ind<0) return temp;
temp.x=maps[ind].max.x;
temp.y=maps[ind].max.y;
temp.z=maps[ind].max.z;
return temp;
}
void maploop()
{
for(uint i=0; i<maps.length(); i++)
{
maps[i].loop();
}
}
bool map_exists(string mapname)
{
return file_exists("maps/"+mapname+".map");
}
string get_map_text(string map)
{
int ind=get_map_index(map);
if(ind<0) return "";
else return maps[ind].rawdata;
}
